/**
 * current-pims-web org.pimslims.utils.sequenator OrderNotification.java
 * 
 * @author Petr
 * @date 1 Jun 2009
 * 
 *       Protein Information Management System
 * @version: 2.2
 * 
 *           Copyright (c) 2009 Petr The copyright holder has licenced the STFC to redistribute this software
 */
package org.pimslims.utils.sequenator;

import java.io.IOException;
import java.util.HashMap;

import javax.mail.MessagingException;

import org.pimslims.dao.ReadableVersion;
import org.pimslims.lab.Util;
import org.pimslims.lab.sequence.SendMail;

/**
 * OrderNotification
 * 
 */
public class OrderNotification {

    SendMail mail;

    private static String from = "DONOTREPLY@PIMS-LIMS.ORG";

    HashMap<String, String> properties;

    /**
     * Constructor for OrderNotification
     */
    public OrderNotification(final HashMap<String, String> props) {
        this.mail = new SendMail(props);
        this.properties = props;
    }

    String getHeader(final String subject) {
        final StringBuffer sb = new StringBuffer();
        sb.append("<HTML>\n");
        sb.append("<HEAD>\n");
        sb.append("<TITLE>\n");
        sb.append(subject + "\n");
        sb.append("</TITLE>\n");
        sb.append("</HEAD>\n");

        sb.append("<BODY>\n");
        sb.append("<H3>" + subject + "</H3>" + "\n");

        return sb.toString();
    }

    String closeHtml(String message) {
        message += "</BODY>\n";
        message += "</HTML>\n";
        return message;
    }

    public void notifyNewOrder(final String soid, final String context, final ReadableVersion rv)
        throws MessagingException, IOException {
        final SequencingOrder order = new SequencingOrder(soid, rv);
        // Do not notify about controls
        if (order.isControl()) {
            return;
        }

        assert order.isNewOrder();
        // should validate email
        final String to = order.getUserEmail();
        final String subject = "Confirmation: Sequencing Order " + soid + " has been recieved";
        String message = this.getHeader(subject);
        message +=
            "Your order ID is <a href='" + context + "/read/ViewSequencingOrder/" + soid + "' >" + soid
                + "</a><br/>";
        message += "Please do not forget to send samples listed listed here: ";
        message +=
            "<a href='" + context + "/read/OrderAcknowledgement?orderId=" + soid + "'>Sample List</a><br/>";
        message += this.getDoNotReply(context);
        message += this.writeSignature(this.properties.get(SendMail.replyTo));
        message = this.closeHtml(message);
        this.mail.sendMessage(to, OrderNotification.from, subject, message, true);
    }

    public void notifyOrderCompleted(final String soid, final String context, final ReadableVersion rv)
        throws MessagingException, IOException {
        final SequencingOrder order = new SequencingOrder(soid, rv);
        // Do not notify about controls
        if (order.isControl()) {
            return;
        }

        assert order.isCompletedOrder(null); //TODO supply experiment group

        final String to = order.getUserEmail();
        final String subject = "Sequencing Order " + soid + " is completed";
        String message = this.getHeader(subject);
        message +=
            "Follow the URL to retrieve the results <a href='" + context + "/read/ViewSequencingOrder/"
                + soid + "' >" + soid + "</a>";
        message += this.getDoNotReply(context);
        message += this.writeSignature(this.properties.get(SendMail.replyTo));
        message = this.closeHtml(message);
        this.mail.sendMessage(to, OrderNotification.from, subject, message, true);

    }

    String writeSignature(final String signature) {
        if (signature == null) {
            return "";
        }
        String sign = "<br/>";
        for (final String part : signature.split(",")) {
            sign += part + "<br/>";
        }
        return sign;
    }

    String getDoNotReply(final String context) {
        assert !Util.isEmpty(context);
        return "<br/>This is an automated message generated by the " + "<a href='" + context + "/" + "' >"
            + "PIMS" + "</a>" + " system, please do not reply. "
            + "If you have any enquires please use the contact details provided below.<br/>";
    }
}

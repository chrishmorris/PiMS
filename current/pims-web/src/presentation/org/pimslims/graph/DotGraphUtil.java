package org.pimslims.graph;

import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashSet;
import java.util.Set;

import org.pimslims.utils.ExecRunner;
import org.pimslims.utils.ExecRunnerException;
import org.pimslims.utils.ExecRunnerException.BadPathException;

import att.grappa.Edge;
import att.grappa.Element;
import att.grappa.Graph;
import att.grappa.GrappaConstants;
import att.grappa.Node;

public class DotGraphUtil {

    // SVG format for dot

    public static final String FORMAT_SVG = "svg";

    public static final String FORMAT_PNG = "png";

    // a static set contains formats of DOT output files that are currently
    // supported by PIMS

    public static final Set<String> GRAPH_FORMATS = new HashSet<String>();
    static {
        DotGraphUtil.GRAPH_FORMATS.add("svg");
        DotGraphUtil.GRAPH_FORMATS.add("png");
        DotGraphUtil.GRAPH_FORMATS.add("gif");
        DotGraphUtil.GRAPH_FORMATS.add("jpg");
        DotGraphUtil.GRAPH_FORMATS.add("jpeg");
        DotGraphUtil.GRAPH_FORMATS.add("pdf");
        DotGraphUtil.GRAPH_FORMATS.add("ps");
        DotGraphUtil.GRAPH_FORMATS.add("cmapx"); // client side image map
        DotGraphUtil.GRAPH_FORMATS.add("dot"); // raw dot file, for debugging
    }

    // common logging log reference

    // TODO Log log = LogFactory.getLog(Class.class);

    /**
     * runs dot.exe in a new process, keeps track of error stream and returns results as a byte array
     * 
     * @param dot_path
     * @param format - desired output format for DOT.exe
     * @param inputdata - byte array of input data for DOT; see DOT documentation for details of *.dot file
     * @return - byte array of data, generated by DOT as an outputstream; in case of format=svg returns as svg
     *         image of the graph as a byte array
     * @throws GraphGenerationException
     * @throws ExecRunnerException
     */
    public byte[] runDot(final String dot_path, final String format, final String inputdata)
        throws GraphGenerationException, ExecRunnerException.BadPathException {

        //System.out.println("DotGraphUtil.runDot [" + dot_path + "," + format + "," + new String(inputdata)
        //    + "]");
        byte[] results;

        // checking input parameters

        if (dot_path == null || dot_path.length() < 1) {
            throw new GraphGenerationException("path to dot.exe is wrong; path = " + dot_path);
        }
        if (format == null || (!DotGraphUtil.GRAPH_FORMATS.contains(format))) {
            throw new GraphGenerationException("format = " + format
                + " is not supported by DotGraphUtil. Supported formats : "
                + DotGraphUtil.GRAPH_FORMATS.toString());
        }
        if (inputdata.length() == 0) {
            throw new GraphGenerationException("no input data for getDotResults()");
        }

        // running dot.exe in a new process

        final String[] commands = { dot_path, "-T" + format, "-Kdot" }; // or -Kfdp 0r -Kdot 0r -Kcirco
        InputStream input = null;
        try {
            final ExecRunner dotRunner = new ExecRunner(commands);
            input = new ByteArrayInputStream(inputdata.getBytes("UTF-8"));
            results = dotRunner.runCommand(input);

        } catch (final AssertionError e) {
            System.out.println("dor exception [" + e.getMessage() + "]");
            System.out.println("dot input [" + new String(inputdata) + "]");
            throw e;
        } catch (final UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (final IOException ioe) {
                    // nothing useful to do here
                }
            }
        }

        //System.out.println("DotGraphUtil.dot [" + new String(results) + "]");
        return results;

    }// End of runDot

    /**
     * creates a graph example
     * 
     * @return
     * @throws GraphGenerationException
     */
    @Deprecated
    // not used
    public static ByteArrayOutputStream getDefaultGraphData() throws GraphGenerationException {

        final ByteArrayOutputStream output = new ByteArrayOutputStream();

        final Graph graph = new Graph("my title", true, false);

        // this generates target progress diagram
        Element.setUserAttributeType("Label", GrappaConstants.STRING_TYPE);
        graph.setNodeAttribute("color", "green");
        graph.setNodeAttribute(GraphFormat.DOT_FILLCOLOR, "springgreen");
        graph.setNodeAttribute("style", "filled");
        graph.setNodeAttribute("URL", "www.oppf.ox.ac.uk");
        graph.setNodeAttribute("comment", "We can have tooltips for each node!!!");

        graph.setAttribute("color", "grey");
        graph.setAttribute("bgcolor", "whitesmoke");
        graph.setAttribute("style", "filled");

        // graph.setAttribute("size", "6,6");
        graph.setNodeAttribute("fontsize", 8);

        Element.setUserAttributeType("URL", GrappaConstants.STRING_TYPE);
        Element.setUserAttributeType("fontcolor", GrappaConstants.STRING_TYPE);
        Element.setUserAttributeType(GraphFormat.DOT_FILLCOLOR, GrappaConstants.STRING_TYPE);
        Element.setUserAttributeType("style", GrappaConstants.STRING_TYPE);
        Element.setUserAttributeType("shape", GrappaConstants.STRING_TYPE);

        final Node target = new Node(graph, "target");
        target.setAttribute("shape", "diamond");
        target.setAttribute(GraphFormat.DOT_FILLCOLOR, "white");
        target.setAttribute("color", "blue");
        target.setAttribute("URL", "www.oppf.ox.ac.uk");

        final Node pcr1 = new Node(graph, "pcr 1");
        final Node pcr2 = new Node(graph, "pcr 2");
        final Node pcr3 = new Node(graph, "pcr 3");
        final Node pcr4 = new Node(graph, "pcr 4");
        final Node pcr5 = new Node(graph, "pcr 5");
        final Node pcr6 = new Node(graph, "pcr 6");
        final Node pcr7 = new Node(graph, "pcr 7");

        new Edge(graph, target, pcr1);
        new Edge(graph, target, pcr2);
        new Edge(graph, target, pcr3);
        new Edge(graph, target, pcr4);
        new Edge(graph, target, pcr5);
        new Edge(graph, target, pcr6);
        new Edge(graph, target, pcr7);

        final Node expression1 = new Node(graph, "expression 1");
        final Node expression2 = new Node(graph, "expression 2");
        final Node expression3 = new Node(graph, "expression 3");
        final Node expression4 = new Node(graph, "expression 4");
        final Node expression5 = new Node(graph, "expression 5");
        expression5.setAttribute("color", "red");
        expression5.setAttribute(GraphFormat.DOT_FILLCOLOR, "lightpink1");
        final Node expression6 = new Node(graph, "expression 6");
        final Node expression7 = new Node(graph, "expression 7");

        new Edge(graph, pcr1, expression1);
        new Edge(graph, pcr2, expression2);
        new Edge(graph, pcr3, expression3);
        new Edge(graph, pcr4, expression4);
        new Edge(graph, pcr5, expression5);
        new Edge(graph, pcr6, expression6);
        new Edge(graph, pcr7, expression7);

        final Node scaleup1 = new Node(graph, "scaleup 1");
        final Node scaleup2 = new Node(graph, "scaleup 2");
        final Node scaleup3 = new Node(graph, "scaleup 3");
        final Node scaleup4 = new Node(graph, "scaleup 4");
        // Node scaleup5 = new Node(graph, "scaleup 5");
        final Node scaleup6 = new Node(graph, "scaleup 6");
        final Node scaleup7 = new Node(graph, "scaleup 7");
        scaleup7.setAttribute("color", "red");
        scaleup7.setAttribute(GraphFormat.DOT_FILLCOLOR, "lightpink1");

        new Edge(graph, expression1, scaleup1);
        new Edge(graph, expression2, scaleup2);
        new Edge(graph, expression3, scaleup3);
        new Edge(graph, expression4, scaleup4);
        // Edge edge25 = new Edge(graph, expression5, scaleup5);
        new Edge(graph, expression6, scaleup6);
        new Edge(graph, expression7, scaleup7);

        graph.printGraph(output);

        return output;

    }

    public static void main(final String[] args) {

        if (args.length == 0) {
            System.out.println("Usage: DotGraphUtil -o outfile");
        }

        String outfile = "";
        final String dot_path = "C:\\Program Files\\ATT\\Graphviz\\bin\\dot.exe";

        for (int i = 0; i < args.length; i++) {
            final String s = args[i];

            if (s.charAt(0) == '-') {
                final char ch = s.charAt(1);
                switch (ch) {

                    case 'o':
                        outfile = args[++i];
                        break;

                    default:
                        i++;
                        break;
                }
            }
        }

        System.out.println("DotGraphUtil [" + outfile + "]");

        if (outfile.length() == 0) {
            System.out.println("Spine2Export ERROR please supply a valid parameters"); //TODO huh?
            System.exit(0);
        }

        try {

            final DotGraphUtil util = new DotGraphUtil();
            //util.runDot(dot_path, "svg", new String(util.getDefaultGraphData().toByteArray()));
            //util.runDot(dot_path, "png", new String(util.getDefaultGraphData().toByteArray()));

            final BufferedOutputStream bos =
                new BufferedOutputStream(new FileOutputStream(new File(outfile)));

            // write the .dot
            //bos.write(util.getDefaultGraphData().toByteArray());
            // or the svg
            bos.write(util.runDot(dot_path, "png", new String(DotGraphUtil.getDefaultGraphData()
                .toByteArray())));
            bos.flush();
            bos.close();

        } catch (final BadPathException e) {

            throw new RuntimeException(e);
        } catch (final GraphGenerationException e) {

            throw new RuntimeException(e);
        } catch (final IOException e) {

            throw new RuntimeException(e);
        }
        System.out.println("DotGraphUtil has finished");
    }

}

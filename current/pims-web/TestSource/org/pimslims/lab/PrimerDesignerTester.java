package org.pimslims.lab;

import java.util.Collection;
import java.util.List;

import junit.framework.Assert;
import junit.framework.TestCase;

import org.pimslims.lab.primer.PimsStandardPrimerDesigner;

public class PrimerDesignerTester extends TestCase {

    private static final int KNOWN_LENGTH = 32; // Length of F primer designed

    // for PuRE
    // private static final int KNOWN_LENGTH = 34; // Length of F primer
    // designed for 5
    private static final int REV_LENGTH = 26; // Length of R primer designed

    // for PuRE

    public static void main(final String[] args) {
        junit.textui.TestRunner.run(PrimerDesignerTester.class);
    }

    /*
     * Test method for 'org.pimslims.lab.PimsStandardPrimerDesigner.makePrimers(String, float)'
     */
    public void testNoGene() {
        try {
            PimsStandardPrimerDesigner.doMakePrimers(new String[] { "" }, 50f);
            Assert.fail("cant make primers from empty DNA sequence");
        } catch (final IllegalArgumentException e) {
            // that's fine
        }
    }

    /*
     * Test method for 'org.pimslims.lab.PimsStandardPrimerDesigner.makePrimers(String, float)'
     */
    public void testSimpleGene() {
        final Collection<String> primers =
            PimsStandardPrimerDesigner.doMakePrimers(new String[] { "AAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAA"
                + "AAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAA"
                + "AAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAA" }, 50f);
        Assert.assertTrue(1 <= primers.size());

    }

    /*
     * Test method for 'org.pimslims.lab.PimsStandardPrimerDesigner.makePrimers(String, float)' Using PuRE DNA
     * sequence and known primer length of 32 designed for Tm = 65
     */
    public void testFancyGene() {
        final List<String> primers =
            PimsStandardPrimerDesigner
                .doMakePrimers(
                    new String[] { "ATGAAATCACTAGTTGGAGTCATAATGGGAAGCACGTCAGACTGGGAAACAATGAAATATGCTTGTGACATTTTAGATGAATTAAATATACCGTATGAGAAAAAGGTTGTATCCGCTCATCGGACTCCGGATTATATGTTTGAATATGCAGAGACGGCTCGTGAACGTGGATTGAAAGTTATTATTGCTGGAGCTGGTGGAGCAGCGCATTTACCAGGAATGGTTGCAGCGAAGACGAATCTTCCTGTAATCGGAGTTCCAGTTCAATCAAAAGCGTTAAACGGCTTAGATTCATTATTATCCATCGTCCAAATGCCAGGAGGGGTTCCAGTTGCAACTGTTGCAATTGGTAAGGCTGGTTCAACAAATGCTGGTTTACTTGCTGCACAAATACTTGGATCATTCCATGATGACATACATGATGCATTAGAATTGAGAAGAGAAGCAATTGAAAAAGATGTGCGCGAAGGTAGTGAGCTAGTATGA" },

                    /*
                     * "ATGCAAAAGGTAAAATTACCCCTGACTCTTGATCCGGTTCGTACCGCTCAAAAACGCCTTGATTACCAGGGTATCTATACCCCCGATCAGGTTGAGCGCG"+
                     * "TTGCCGAATCTGTAGTCAGTGTGGACAGTGATGTGGAATGCTCCATGTCGTTCGCTATCGATAACCAGCGTCTCGCCGTTTTGACTGGCGATGCGGTCGT"+
                     * "TACGGTGTCGCTCGAATGCCAGCGTTGCGGGAAACCGTTTACCCATCAGGTTCACACAACGTATTGTTTTAGCCCTGTCCGTTCCGACGAGCAGGCTGAA"+
                     * "GCACTGCCGGAAGCGTATGAGCCGATTGAGGTAAACGAATTCGGCGAAATCGATCTGCTGGCGACGGTTGAAGATGAAATCATCCTCGCCTTGCCGGTAG"+
                     * "TTCCGGTGCATGATTCTGAACACTGTGAAGTGTCCGAGGCGGACATGGTCTTTGGCGAACTGCCTGATGAAGCGCAAAAGCCAAACCCATTTGCCGTATT"+
                     * "AGCCAGCTTAAAGCGTAAGTAA",
                     */// sequence for Traget 5
                    65f);
        Assert.assertEquals(PrimerDesignerTester.KNOWN_LENGTH, primers.get(0).length());
    }

    /*
     * Test method for 'org.pimslims.lab.PimsStandardPrimerDesigner.makePrimers(String, float)' Using DNA
     * sequence with a run of >3 GC Tm = 65
     */
    public void test3GC() {
        final List<String> primers =
            PimsStandardPrimerDesigner.doMakePrimers(
                new String[] { "ATGAAATCGCTAGTTGGCGGGGCCGGCCGCGCCGATGAAATCGCTAGTTGGCGGGGCCGGCCGCGCCG" }, 65f);
        Assert.assertEquals(23, primers.get(0).length());
    }

    /*
     * Test method for 'org.pimslims.lab.PimsStandardPrimerDesigner.makePrimers(String, float)' Using PuRE DNA
     * sequence and known primer length of 32 designed for Tm = 65
     */
    public void testRevComp() {
        final List<String> primers =
            PimsStandardPrimerDesigner
                .doMakePrimers(
                    new String[] { "TACTAGCTCACTACCTTCGCGCACATCTTTTTCAATTGCTTCTCTTCTCAATTCTAATGCATCATGTATGTCATCATGGAATGATCCAAGTATTTGTGCAGCAAGTAAACCAGCATTTGTTGAACCAGCCTTACCAATTGCAACAGTTGCAACTGGAACCCCTCCTGGCATTTGGACGATGGATAATAATGAATCTAAGCCGTTTAACGCTTTTGATTGAACTGGAACTCCGATTACAGGAAGATTCGTCTTCGCTGCAACCATTCCTGGTAAATGCGCTGCTCCACCAGCTCCAGCAATAATAACTTTCAATCCACGTTCACGAGCCGTCTCTGCATATTCAAACATATAATCCGGAGTCCGATGAGCGGATACAACCTTTTTCTCATACGGTATATTTAATTCATCTAAAATGTCACAAGCATATTTCATTGTTTCCCAGTCTGACGTGCTTCCCATTATGACTCCAACTAGTGATTTCAT" },
                    65f);
        Assert.assertEquals(PrimerDesignerTester.REV_LENGTH, primers.get(0).length());
    }

    private static final String TARGET =
        "ATGTTAACGCATTTGAAAAATAGCTATATGCTCACTACTGAACTGGGCGATATTGAACTTAAGCCATTCGATCTTGAAAAAAATATCGACACTTTGTTTG\r\n"
            + "GTTGGACTAGCCAAGCATACGCTAAGTTTTGGGGGCATCTTGATTCATCAATAGAAGTCCTTAAGGCAGACTATGAGCAACTCATTGGCAGTGGGCATAC\r\n"
            + "GCAATGCTACCTTGGTTATGTCAACCAAAATGTTCAATTCTTTCTAGAAATATATGATCCGAAGCATGACGATATTGGAAAGCATTACGATGCATGTCTT\r\n"
            + "GGTGATATTGGACTACATATATTAATAGCCCCTGCTGATCGACCTATCCACGGTTTTACCCAGCATATCTTTTCAGTCTGCATGGACTTTCTATTTAGCC\r\n"
            + "ATGAAGAAGTGAAGCGTGTGGTTGTAGAGCCCGATGTTAATAATGAGAAAATACATAGGATTAATCAACGGGCTGGCTTTATTCATGAACGTATTGTTGA\r\n"
            + "CCTTGGACACAAGCAGGCATTTTTAGGATTTTGCACCAAAACAGATTTTGAACGAGCACGACTCATATCCAATATGCCTCTAAATCACAAGGCGAATGAA\r\n"
            + "CTTTCCGCATTCGATGCAGTAGAGAGTCTAGATAAAACCAGTTGGCACACCGTTAACCGCCAACATATCCAGAAAGCAATCAGTGAGCTCGCTCACGAAA\r\n"
            + "GGCTGATTAATCCAAAACGAATTCATGATAAAGGTGATAATCACTATGTCTTAGTCAGTGACTTAGGCGATATAGAATACCGATTTTGCGCGACCGTAAT\r\n"
            + "GAATCTCAATCATTGGTTAATTGATCAAAACAGTATTGAAAAATGGATGGATGGCTCTCTACAAGATCTAGATGCGATTCAGTTCGTTGTCGAATTCCAA\r\n"
            + "CAAAGCATGGGAATCGCAGAATCCATGCTACCTACCTACCTAGAAGAAATCAGTAGCAGCCTATGTGGACGGGCTTATAAGTTAAAACATAAGGCGATAC\r\n"
            + "CTTGCGAGGCACTGCTAGAGGCCGACTTTCAATTAATCGAGACCTCCATGAATGAAGGTCACCCTTCTTTTATTGCCAATAATGGTCGCATTGGATTTGA\r\n"
            + "TGCAATTGATTTCAGACGTTATGCACCAGAAGCCGCAAACCCAGTTAAATTAATTTGGATTGCAGCCAATCAGTCCAACGCGGACTTTGCTTCAATTAGT\r\n"
            + "GAACTTGACTATGAAACACTGTTAGAAACAGAATTTGATGCAGCGACACTTCAAAAATTCGATCGACTTTTATCTCAACAAGGAAAAAGTCTAAGCGATA\r\n"
            + "CCATACTTATCCCGGTTCATCCTTGGCAATGGTTCAATAAGCTTAGCCATATCTATGCCGCTGACATCGCACGGGGTGACATTATTTGCTTAGGTTATAG\r\n"
            + "TGATGACGCCTATCAAGCGCAGCAGTCGATTCGTACATTTTATAATGTTAGCCATCCGCATAAGCATTATGTAAAAACGGCCTTATCTATTGTCAATATG\r\n"
            + "GGTTTTGTTCGAGGTCTTTCGTCTTATTACATGCGCACCACACCTGCGATTAACGAGTGGCTACATGAAACATTAAGCAAAGATCCTTATATCCAGAAAA\r\n"
            + "CCGGCTTCACTATTTTAAGAGAATTGGCTGCCGTAGGTTATCGCAACCCACACTTTGAACAAGCCAATGTTGGGCAAAGTCCGTATAAAAAGATGCTGGC\r\n"
            + "TGGTTTATGGAGAGAAAGCCCATCAGCAATGATCACGCCTCAGCAACAGTTAGCCACTATGGCGTCTTTACTCCATATTGATCACAATGGTGATGCATAT\r\n"
            + "TTACTAGCATTAATCAAAGCGTCTGGTCTGAATATCGATGATTGGCTAAGTCAATATTTTAAAGCCTATTTGACGCCAATTTTACATTGTTTTTATGCTC\r\n"
            + "ACGAAATTGTCTTCATGCCCCATGGCGAGAACATCATATTAACGCTTGAAAACCATGTACCAGTTCATGCTTTCATGAAGGACATAGGCGAAGAAGTCTG\r\n"
            + "TCTGCTTAATAGCGATAAAAACGTTCCAGATGATGTGGCCCGCATTCATGTAAGCATGCCAGAGAGCATGGAATTACTATCAGTATTCACTGACATATTT\r\n"
            + "GATGGTTTTTTCCGTTATTTAAGCGCGATCTTACTAGAAAAAGCGAATTACTCTGAGCACACATTTTGGCGAAAAGTCAGTGATTGCATTCATGACTATC\r\n"
            + "AATCTAGTCAGCCACAACTATCTCAGCGTTTCGCACAACACGATATATTCCAAAAGACCTTTTCCCATTCATGCTTAAATCGTTTGCAACTGCGCAATAA\r\n"
            + "TCAACAAATGGTGGATCTTAGCGACCCTGCTAATAGCCTTGCGTTTGCTGGTACACTTGATAACCCTGTTGCGCCATTCGTAAAAGACCAACGTACTGAA\r\n"
            + "TCCAATCAATCAGACATGGTTATGAGCAATTAA";

    public void testMany() {
        final List<String> primers =
            PimsStandardPrimerDesigner.doMakePrimers(new String[] { PrimerDesignerTester.TARGET }, 65f);
        Assert.assertTrue(7 <= primers.size());
    }
}
